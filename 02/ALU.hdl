// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // 00: nx=0, zx=0 -> x
    // 01: nx=0, zx=1 -> false (0)
    // 10: nx=1, zx=0 -> !x
    // 11: nx=1, zx=1 -> true (!0)
    Not16(in=x, out=w1);
    Mux4Way16(a=x, b=false, c=w1, d=true, sel[1]=nx, sel[0]=zx, out=xx);

    // 00: ny=0, zy=0 -> y
    // 01: ny=0, zy=1 -> false (0)
    // 10: ny=1, zy=0 -> !y
    // 11: ny=1, zy=1 -> true (!0)
    Not16(in=y, out=w3);
    Mux4Way16(a=y, b=false, c=w3, d=true, sel[1]=ny, sel[0]=zy, out=yy);


    // f=0 -> x&y
    // f=1 -> x+y
    Add16(a=xx, b=yy, out=w5);
    And16(a=xx, b=yy, out=w7);
    Mux16(a=w7, b=w5, sel=f, out=w6);


    // no=0 -> out
    // no=1 -> !out
    Not16(in=w6, out=w8);
    Mux16(a=w6, b=w8, sel=no, out=out, out[0..7]=l8, out[8..15]=h8, out[15]=ng);


    Or8Way(in=l8, out=w11);
    Or8Way(in=h8, out=w12);
    Or(a=w11, b=w12, out=w13);
    Not(in=w13, out=zr);
}
